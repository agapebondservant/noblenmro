#!/bin/sh

#######################################################################################################################################
# Script run by Concourse which will:
# 1) Loop through all zip files in the task's input directory;
# 2) Validate their names (here we assume that the zip file name  must include a version prefix);
# 3) Extract the zip file contents and execute them via the SQL Plus client, capturing their output in autogenerated log files;
# 4) Store the autgenerated log files in one directory for each zip file;
# 5) Generate a new zip file containing all the output directories;
# 6) Save the new zip file to the Concourse task output location.
# 
#NOTE:
#If there are any shell script errors along the way, the script will exit with a non-zero code, hence causing the Concourse pipeline to fail.
#If there are any errors related to the actual DB scripts, by default the script will continue as normal. DB errors will be captured in the log files.
#To change this default behavior and cause the script to abort when there are DB errors, set the Concourse parameter "abort_on_db_error" to y, 
######################################################################################################################################

set -e


## Create output folder to store logs
mkdir -p db_logs

## Loop through contents of zip
for zipfile in ./db_source_files/dbfiles/*.zip; do
   zipfilename=`basename $zipfile .zip`
   ## There must be a version associated with the file
   if ! [[ $zipfilename =~ (^[0-9\.]+)_.* ]]; then
        echo "ERROR: ${zipfilename}.zip must have a version number associated. Expected format: <version no>_${zipfilename}.zip";
        exit -1;
   fi
   ##Create a new directory matching the zipfile name
   mkdir -p db_logs/"$zipfilename"
   ##Extract the contents of the zip
   directoryname=$(unzip ${zipfile} | grep 'creating:' | cut -d' ' -f5-)
   for inputfile in $directoryname/*; do
      inputfilename=`basename $inputfile`
      ## Execute SQL script and generate logs
      echo exit | sqlplus -s $USERNAME/$PASSWD@//$HOST/$SID @"$inputfile" > db_logs/"$zipfilename"/"$inputfilename".log | echo "Log generation complete for script: ${inputfilename}"
      ## if abort_on_db_error=true, exit if there were errors in the SQL output
      if [ `grep "ORA-" db_logs/"$zipfilename/*"/ | wc -l` -gt 0 ] && [ $1 -eq 'y' ]; then
      	echo "ERROR: ORA- errors encountered during DB script execution"
        exit -1
      fi
   done     
done

## Provide a new zip of all the log files
zip -m db_logs/`date +%Y%m%d%H%M%S`_logs.zip db_logs/*
ls -al db_logs/
